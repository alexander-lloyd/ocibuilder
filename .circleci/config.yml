version: 2
jobs:
  install_dep:
    docker:
      - image: golang:1.13.7-alpine
    working_directory: /go/src/github.com/beval/beval
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
            - go-dep-cache-
      - run:
          name: Install dependencies
          command: |
            apk update && apk add curl git build-base bash
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep version
            dep ensure -v
      - save_cache:
          key: go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
          paths:
            - ./vendor
  # lint is the initial job which lints the codebase using standard golangci-lint linter
  lint:
    docker:
      - image: golang:1.13.7-alpine
    working_directory: /go/src/github.com/beval/beval
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
            - go-dep-cache-
      - run: apk update && apk add curl git build-base bash
      - run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.21.0
      - run: make lint
  # test runs the beval unit tests and stores test results in TEMP_RESULTS
  test:
    docker:
      - image: golang:1.13.7
    working_directory: /go/src/github.com/beval/beval
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
            - go-dep-cache-
      - run:
          name: Run unit tests
          command: make test
  e2e_test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/.go_workspace/src/github.com/beval/beval
    steps:
      - run: |
          sudo mkdir -p /go/src/github.com/beval/beval
          sudo chown -R $USER:$USER /go/src/github.com/beval/beval
      - run:
          name: Install Buildah
          command: |
            sudo apt-get update -qq
            sudo apt-get install -qq -y software-properties-common
            sudo add-apt-repository -y ppa:projectatomic/ppa
            sudo apt-get update -qq
            sudo apt-get -qq -y install buildah
            docker version
            buildah version
            curl -sL https://raw.githubusercontent.com/containers/buildah/master/docs/samples/registries.conf | \
                  sudo tee /etc/containers/registries.conf
            sudo rm -rf /usr/local/go
            sudo add-apt-repository -y ppa:longsleep/golang-backports
            sudo apt-get update -qq
            sudo apt-get install -y golang-go
            go version
            git version
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
            - go-dep-cache-
      - run: go get -u github.com/gobuffalo/packr/packr
      - run:
          name: Copy Dependencies
          command: cp -rf /go/src/github.com/beval/beval/vendor /home/circleci/.go_workspace/src/github.com/beval/beval
      - run:
          name: Build Linux Artifact
          command: make bevalctl-linux
      - run:
          name: Run e2e tests
          command: |
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            ginkgo -v ./testing/e2e
  # build runs the build of the linux and mac bevalctl artifacts and persists the packages to the circleci workspace
  build:
    docker:
      - image: golang:1.13.7
    working_directory: /go/src/github.com/beval/beval
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-dep-cache-{{ checksum "Gopkg.lock" }}-v4
            - go-dep-cache-
      - run: go get -u github.com/gobuffalo/packr/packr
      - run:
          name: Build Linux Artifact
          command: make bevalctl-package-linux
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/bevalctl-linux-amd64.tar.gz
            - ./dist/bevalctl/bevalctl
      - run:
          name: Build Mac Artifact
          command: make bevalctl-package-mac
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/bevalctl-mac-amd64.tar.gz
  # push_container pushes the bevalctl container to the beval docker registry when a new tag is added to beval
  push_container:
    docker:
      - image: beval/bevalctl:0.1.1
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run bevalctl Build
          command: |
            export OCI_TAG=$(cat ./VERSION)
            echo $OCI_TAG
            bevalctl build
      - run:
          name: Run Docker Push
          command: |
            export OCI_TAG=$(cat ./VERSION)
            echo $OCI_TAG
            bevalctl push
  # push_bin pushes both the linux and mac binaries to a github release when a new tag is added to beval
  push_bin:
    environment:
      - CIRCLE_PROJECT_USERNAME: beval
      - CIRCLE_PROJECT_REPONAME: beval
    docker:
      - image: golang:alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Publish Release Binaries to GitHub
          command: |
            export VERSION=$(cat ./VERSION)
            apk add git
            go get github.com/tcnksm/ghr
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./dist/

#TODO: add contexts to share env variables between different jobs
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - install_dep:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - install_dep
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - lint
          filters:
            tags:
              only: /.*/
      - e2e_test:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - e2e_test
          filters:
            tags:
              only: /.*/
      - push_bin:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # only recognise tags with semantic versioning e.g. 0.1.0
              only: /^\d+\.\d+\.\d+.*$/
      - push_container:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # only recognise tags with semantic versioning e.g. 0.1.0
              only: /^\d+\.\d+\.\d+.*$/
